@using AshesMapBib.Models
@using System.Threading
@using FrontUI.AppStates
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using MudBlazor
@using System.Linq
@inject IJSRuntime JS

<MudPaper Height="91.3vh" Style="overflow:hidden">

    <!-- NodePosition Auswahl -->
    @if (_mapData.FilteredPosList != null)
    {

        <MudToggleGroup Style="display:flex;flex-wrap:nowrap;overflow-x:auto;margin-bottom:5px;" Outlined="false" T="string" SelectionMode="SelectionMode.MultiSelection" @bind-Values="_mapData.timeLeftFilter" Color="Color.Secondary" CheckMark>
            <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                           Variant="Variant.Filled"
                           Size="Size.Medium"
                           Title="Map neu laden"
                           Style="margin-right:6px; background-color:#90caf9; color:#0d47a1; border-radius:6px;"
                           OnClick="ReloadMap" />

            <MudToggleItem Style="background-color: forestgreen;color:black" Value="@("act")"
                           UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank"
                           SelectedIcon="@Icons.Material.Filled.CheckBox" />
            <MudToggleItem Style="background-color: orangered; color:black" Value="@("<-1d")"
                           UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank"
                           SelectedIcon="@Icons.Material.Filled.CheckBox" />
            <MudToggleItem Style="background-color: red; color:black" Value="@(">-1d")"
                           UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank"
                           SelectedIcon="@Icons.Material.Filled.CheckBox" />
            <MudToggleItem Style="background-color: grey; color:black" Value="@("ghost")"
                           UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank"
                           SelectedIcon="@Icons.Material.Filled.CheckBox" />
        </MudToggleGroup>

        <MudChipSet Class="chipset-nowrap" @bind-SelectedValues="_mapData.selectedFilter" SelectionMode="SelectionMode.MultiSelection" CheckMark>
            @foreach (var rarity in Rarities)
            {
                <MudChip Value="@rarity" Size="Size.Medium" Class="compact-chip" Style="@GetRarityStyle(rarity)">
                    @GetRarityText(rarity)
                </MudChip>
            }
        </MudChipSet>
        <br />
        <MudDivider />

        @if (_mapData.SelectedPosition != null)
        {
            <MudPaper Class="selected-pos-highlight" Elevation="4" Style="margin:12px; padding:10px; border-radius:10px; border:2px solid #ff9800; background-color: rgba(255,152,0,0.08);">
                <NodePositionComponent NodePosition="_mapData.SelectedPosition" Compact="false" />
            </MudPaper>
        }

    }

    @if (_mapData.FilteredPosList != null)
    {
        <MudRadioGroup T="NodePositionView" @bind-Value="_mapData.SelectedPosition" Style="display:flex; flex-direction: column;flex-wrap: nowrap;overflow-y:auto;height:90%;">
            @foreach (var spot in _mapData.FilteredPosList
                .OrderByDescending(p => p.AlertSet)
                .ThenBy(p => p.TimeLeft))
            {
                <MudRadio Value="spot" Color="Color.Primary" Dense="true">
                    <ChildContent>
                        <NodePositionComponent NodePosition="spot" Compact="@_compactList" />
                    </ChildContent>

                </MudRadio>
                <MudDivider Class="mud-divider-dense" />
            }
        </MudRadioGroup>
    }


</MudPaper>
<style>
    .mud-input-control > .mud-input-control-input-container {
        position: relative;
        display: flex;
        flex-direction: column;
    }

    /* Rarity-Chips einzeilig und zentriert darstellen */
    .chipset-nowrap {
        display: flex;
        flex-wrap: nowrap;
        justify-content: center; /* Chips zentrieren */
        width: 100%;
        overflow-x: auto;
        gap: 8px; /* Abstand zwischen den Chips */
        padding: 0 12px; /* Randabstände links/rechts */
    }
    .chipset-nowrap .mud-chip {
        flex: 0 0 auto;
        white-space: nowrap;
        margin: 0 !important; /* Standardabstände der Chips überschreiben; Abstand über gap steuern */
    }
    .compact-chip {
        height: 24px;
        line-height: 24px;
        padding: 0 6px; /* Kleineres Padding für kompaktere Chips */
        font-size: 0.75rem;
    }

    /* Selected position highlight */
    .selected-pos-highlight {
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }

    /* Dünnere Divider zwischen Einträgen */
    .mud-divider-dense {
        margin: 2px 0;
        opacity: 0.5;
    }
</style>
@code {
    // @CascadingParameter ermöglicht den Zugriff auf den globalen Zustand von _mapData
    [CascadingParameter] public CascadingMapData _mapData { get; set; }

    // Variablen und Timer-Setup
    public NodePositionView selectedNode { get; set; }
    private Timer _timer;
    private bool _open = false; // Steuert, ob das Drawer geöffnet ist
    private bool _compactList = true; // steuert kompakte Darstellung der Liste
    private string? _lastSelectedId; // track selection change

    public void UpdateSelectedNode(NodePositionView spot)
    {
        selectedNode = new();
        selectedNode = spot;
    }
    // Entfernt alle Marker von der Karte
    private async Task RemoveMarkers()
    {
        await JS.InvokeVoidAsync("removeCustomMarkers");
    }
    private async Task ReloadMap()
    {
        if (_mapData is not null)
            await _mapData.ReloadMapAsync();
    }
    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    // Timer-Update-Funktion, die den Zustand bei aktivem Timer jede Sekunde aktualisiert
    protected override void OnInitialized()
    {
        _timer = new Timer(UpdateTimer, null, 0, 1000);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var id = _mapData?.SelectedPosition?.Id;
        if (id != _lastSelectedId && _mapData?.SelectedPosition != null)
        {
            _lastSelectedId = id;
            try
            {
                // Marker nur hervorheben, nicht zentrieren
                await JS.InvokeVoidAsync("selectMarker", _mapData.SelectedPosition.Id);
            }
            catch { }
        }
    }

    private void UpdateTimer(object state)
    {
        if (_mapData.Timer)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    // Callback-Methode, wenn der Drawer geöffnet/geschlossen werden soll
    private void ToggleDrawer()
    {
        _open = !_open;
    }

    // Wird aufgerufen, wenn ein Node ausgewählt wird
    private void OnNodeSelected(NodePositionView node)
    {
        CenterOnMap(node);
    }

    // Zentriert die Karte auf den ausgewählten Node
    private void CenterOnMap(NodePositionView node)
    {
        Console.WriteLine($"Center on map: {node.Node.Name}");
    }

    // Entsorgt den Timer, wenn die Komponente zerstört wird
    public void Dispose()
    {
        _timer?.Dispose();
    }

    // Rarities-Liste mit gewünschter Sortierung
    private IEnumerable<string> Rarities =>
        _mapData?.NodePositionList?
            .Select(n => n.Rarity)
            .Where(r => !string.IsNullOrWhiteSpace(r))
            .Distinct()
            .OrderBy(r => GetRarityOrderIndex(r))
        ?? Enumerable.Empty<string>();

    private static int GetRarityOrderIndex(string hexColor)
    {
        // gewünschte Reihenfolge: unknown, rare, heroic, epic, legendary
        return hexColor switch
        {
            "808080" => 0, // Unknown
            "2c35be" => 1, // Rare
            "f3eb0a" => 2, // Heroic
            "9b1cdc" => 3, // Epic
            "ff5700" => 4, // Legendary
            _ => 99
        };
    }

    private static string GetRarityStyle(string hexColor)
    {
        // Hintergrundfarben der Chips passend zur Rarity
        return hexColor switch
        {
            "808080" => "color:#000000; background-color:#808080", // Unknown (grau)
            "2c35be" => "color:#000000; background-color:#0000ff", // Rare (blau)
            "f3eb0a" => "color:#000000; background-color:#f3eb0a", // Heroic (gelb)
            "9b1cdc" => "color:#000000; background-color:#9b1cdc", // Epic (violett)
            "ff5700" => "color:#000000; background-color:#ff5700", // Legendary (orange)
            _ => ""
        };
    }

    private string GetRarityText(string hexColor)
    {
        return hexColor switch
        {
            "808080" => "Unknown",
            "2c35be" => "Rare",
            "f3eb0a" => "Heroic",
            "9b1cdc" => "Epic",
            "ff5700" => "Legendary",
            _ => "Unknown"
        };
    }
}

