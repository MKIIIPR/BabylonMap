@using AshesMapBib.Models
@using System.Threading
@using FrontUI.AppStates
@using FrontUI.FrontPages.Dialogs
@inject IJSRuntime JS
@inject IDialogService DialogService

<div class="node-row" style="@RowStyle">
    <div style="display:flex; align-items:center; width:100%">

        <div style="width:12px;/* @($"background-color: {NodePosition.TimeRemainingColor}") */ "></div>

        <div style="align-self: center;min-width: @(Compact ? "32px" : "50px");min-height: @(Compact ? "32px" : "50px");display: inline-flex;align-items: center;justify-content: center;position: relative;border: 2px solid #@(NodePosition.Rarity);background-color: #221d1d;border-radius: 8px;overflow: hidden;">
            <img src="@(NodePosition.Node.NodeImageUrl)" style="width:@(Compact ? "32px" : "50px");height:@(Compact ? "32px" : "50px");z-index:2"/>
            <div style="position: absolute;bottom: 0; left: 0;width: 100%;height: 100%;background: linear-gradient(to top, #@(NodePosition.Rarity), #221d1d);opacity: 1;z-index: 1;"></div>
        </div>

        <div style="display:flex;flex-direction: column;padding-left:@(Compact ? "4px" : "5px"); flex: 1 1 auto; min-width:0;">
            <div style="display:flex;flex-direction: column;">
                <span style="font-size: @(Compact ? "0.72rem" : "smaller");">@(NodePosition.Node.Name)</span>
                <span style="font-size: @(Compact ? "0.72rem" : "smaller"); white-space: nowrap; font-variant-numeric: tabular-nums; font-feature-settings:'tnum' 1, 'lnum' 1; font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', monospace; width: 8ch; display:inline-block;">@(NodePosition.TimeRemainingString)</span>
                <span style="font-size: @(Compact ? "0.72rem" : "smaller");">@(NodePosition.ActualRespawnAt)</span>
            </div>
            @if (!Compact)
            {
                <div style="width:220px;height:50px;display:flex;gap:1px;align-items:center;flex-wrap:wrap;">
                    <MudIconButton Icon="@Icons.Material.Filled.AdsClick" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" OnClick="CenterMap" />
                    <MudIconButton Icon="@Icons.Material.Filled.SyncLock" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="ToggleTimerConfirmationDialog" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="() => OpenDeleteConfirmationDialog(NodePosition)" />
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Info" Size="Size.Small" OnClick="() => EditNode(NodePosition)" />
                    <MudToggleIconButton @bind-Toggled="NodePosition.AlertSet"
                                          Icon="@Icons.Material.Filled.AlarmOff" Color="@Color.Error"
                                          ToggledIcon="@Icons.Material.Filled.AlarmOn" ToggledColor="@Color.Success" />
                </div>
            }
        </div>

        @if (Compact)
        {
            <div style="margin-left:auto; display:flex; gap:1px; align-items:center; width:160px; justify-content:flex-end;">
                <MudIconButton Icon="@Icons.Material.Filled.AdsClick" Variant="Variant.Text" Color="Color.Success" Size="Size.Small" Style="width:24px;height:24px" OnClick="CenterMap" />
                <MudIconButton Icon="@Icons.Material.Filled.SyncLock" Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" Style="width:24px;height:24px" OnClick="ToggleTimerConfirmationDialog" />
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Text" Color="Color.Info" Size="Size.Small" Style="width:24px;height:24px" OnClick="() => EditNode(NodePosition)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" Color="Color.Error" Size="Size.Small" Style="width:24px;height:24px" OnClick="() => OpenDeleteConfirmationDialog(NodePosition)" />
                <MudToggleIconButton @bind-Toggled="NodePosition.AlertSet"
                                      Icon="@Icons.Material.Filled.AlarmOff" Color="@Color.Error"
                                      ToggledIcon="@Icons.Material.Filled.AlarmOn" ToggledColor="@Color.Success" Size="Size.Small" Style="width:24px;height:24px" />
            </div>
        }

    </div>
</div>

@code {
    [Parameter] public NodePositionView NodePosition { get; set; }
    [Parameter] public bool Compact { get; set; } = false;
    [CascadingParameter] public CascadingMapData _mapData { get; set; }

    private System.Timers.Timer? _blinkTimer;
    private bool isBlinking;
    private bool blinkPhase; // toggles to simulate blinking
    private DateTime? blinkUntil;

    private string RowStyle =>
        isBlinking && blinkPhase
            ? "outline:2px solid #ff9800;border-radius:6px;"
            : "outline:2px solid transparent;border-radius:6px;";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        StartOrStopBlinkWatcher();
    }

    protected override void OnParametersSet()
    {
        StartOrStopBlinkWatcher();
    }

    private void StartOrStopBlinkWatcher()
    {
        _blinkTimer?.Stop();
        _blinkTimer?.Dispose();
        _blinkTimer = null;

        if (NodePosition?.AlertSet != true)
        {
            isBlinking = false;
            blinkPhase = false;
            try { _ = JS.InvokeVoidAsync("stopMarkerBlink", NodePosition?.Id); } catch { }
            StateHasChanged();
            return;
        }

        _blinkTimer = new System.Timers.Timer(500);
        _blinkTimer.Elapsed += (_, __) => OnBlinkTick();
        _blinkTimer.AutoReset = true;
        _blinkTimer.Start();
    }

    private void OnBlinkTick()
    {
        if (NodePosition == null)
            return;

        // toggle visual blink if an active window exists
        if (blinkUntil.HasValue)
        {
            if (DateTime.Now >= blinkUntil.Value)
            {
                blinkUntil = null;
                isBlinking = false;
                blinkPhase = false;
                InvokeAsync(StateHasChanged);
            }
            else
            {
                blinkPhase = !blinkPhase;
                InvokeAsync(StateHasChanged);
            }
            return;
        }

        EvaluateBlinkStart();
    }

    private async void EvaluateBlinkStart()
    {
        var minutes = (int)Math.Round(NodePosition.TimeRemaining.TotalMinutes);
        var milestones = new HashSet<int> { 30, 20, 10, 0, -10, -20, -30 };

        if (milestones.Contains(minutes))
        {
            isBlinking = true;
            blinkPhase = true;
            blinkUntil = DateTime.Now.AddMinutes(1);
            try { await JS.InvokeVoidAsync("bmPlayBlinkBeep", 2000, 0.03, 880); } catch { }
            try { await JS.InvokeVoidAsync("startMarkerBlink", NodePosition.Id, 60000, 500); } catch { }
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task CenterMap()
    {
        await JS.InvokeVoidAsync("CenterOnMap", NodePosition.Lat, NodePosition.Lng);
    }
    private async Task ToggleTimerConfirmationDialog()
    {
        var parameters = new DialogParameters { { "Message", "Reset Timer?" } };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Reset", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
            await ToggleTimer();
    }
    public async Task ToggleTimer()
    {
        NodePosition.LastHarvest = DateTime.Now;
        await _mapData.UpdateNodePosition(NodePosition);
    }
    private async Task OpenDeleteConfirmationDialog(NodePositionView spot)
    {
        var parameters = new DialogParameters { { "Message", "Möchten Sie dieses Objekt wirklich löschen?" } };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Löschen bestätigen", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
            await DeleteNode(spot);
    }
    private async Task DeleteNode(NodePositionView spot)
    {
        spot.Ghost = true;
        await _mapData.UpdateNodePosition(spot);
    }

    private async Task EditNode(NodePositionView spot)
    {
        var parameters = new DialogParameters();
        parameters.Add("ToCreateNewPos", spot);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<NodePositionDialog>("Edit node position", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var updatedSpot = (NodePositionView)result.Data;
            await _mapData.UpdateNodePosition(updatedSpot);
        }
    }

    public void Dispose()
    {
        _blinkTimer?.Stop();
        _blinkTimer?.Dispose();
        try { _ = JS.InvokeVoidAsync("stopMarkerBlink", NodePosition?.Id); } catch { }
    }
}
