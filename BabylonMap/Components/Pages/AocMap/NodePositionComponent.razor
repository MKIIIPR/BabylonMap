
@using AshesMapBib.Models
@using System.Threading
@using BabylonMap.Components.AppStates
@inject IJSRuntime JS

<MudExpansionPanel  Style="padding-left:3px ;width:200px" >
    <TitleContent>
        <div style="display:flex">

        <div style="width:12px;/* @($"background-color: {NodePosition.TimeRemainingColor}") */ "></div>

           
            <div style="align-self: center;min-width: 50px;min-height: 50px;display: inline-flex;align-items: center;justify-content: center;position: relative;border: 2px solid #@(NodePosition.Rarity);background-color: #221d1d;border-radius: 8px;overflow: hidden;">
                <!-- Icon -->
               <img src="@(NodePosition.Node.NodeImageUrl)" style="width:50px;height:50px;z-index:2"/>
                <!-- Overlay mit Farbverlauf -->
                <div style="position: absolute;bottom: 0; left: 0;width: 100%;height: 100%;background: linear-gradient(to top, #@(NodePosition.Rarity), #221d1d);opacity: 1;z-index: 1;"></div>
            </div>


            <div style="display:flex;flex-direction: column;padding-left:5px;">
                <div style="display:flex;flex-direction: column;">
                    
                <span>@(NodePosition.TimeRemainingString)</span>
                    <span style="font-size: smaller;">@(NodePosition.Node.Name)</span>
                </div>
                <div style="width:150px;height:50px">
                <MudIconButton Icon="@Icons.Material.Filled.AdsClick"
                               Variant="Variant.Outlined"
                               Color="Color.Success"
                               Size="Size.Small"
                               OnClick="CenterMap" />
                <MudIconButton Icon="@Icons.Material.Filled.SyncLock"
                               Variant="Variant.Outlined"
                               Color="Color.Primary"
                               Size="Size.Small"
                               OnClick="ToggleTimer" />

                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Variant="Variant.Outlined"
                               Color="Color.Error"
                               Size="Size.Small"
                               OnClick="() => DeleteNode(NodePosition)" />

                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Variant="Variant.Outlined"
                                   Color="Color.Error"
                                   Size="Size.Small"
                                   OnClick="() => DeleteNode(NodePosition)" />

                <MudToggleIconButton @bind-Toggled="NodePosition.AlertSet"
                                     Icon="@Icons.Material.Filled.AlarmOff"
                                     Color="@Color.Error"
                                     ToggledIcon="@Icons.Material.Filled.AlarmOn"
                                     ToggledColor="@Color.Success" />

                </div>

            </div>

        </div>
          
            
      @*   <div style="width:12px;@($"background-color: {NodePosition.TimeRemainingColor}") "></div>
        <div class="d-flex" style="background-color:#@(NodePosition.Rarity)65">
            <div >
                <MudImage Src="@NodePosition.Node.NodeImageUrl" Alt="Mony the dog" Elevation="25" Class="rounded-lg" />
                <span>@(NodePosition.Node.Name)</span><br />
                <span>@(NodePosition.TimeRemainingString)</span><br />
            </div>

            <MudSpacer></MudSpacer>
            <MudIconButton Icon="@Icons.Material.Filled.AdsClick"
            Variant="Variant.Outlined"
            Color="Color.Success"
            Size="Size.Small"
            OnClick="CenterMap" />
            <MudIconButton Icon="@Icons.Material.Filled.SyncLock"
            Variant="Variant.Outlined"
            Color="Color.Primary"
            Size="Size.Small"
            OnClick="ToggleTimer" />

            <MudIconButton Icon="@Icons.Material.Filled.Delete"
            Variant="Variant.Outlined"
            Color="Color.Error"
            Size="Size.Small"
            OnClick="() => DeleteNode(NodePosition)" />

            <MudToggleIconButton @bind-Toggled="NodePosition.AlertSet"
            Icon="@Icons.Material.Filled.AlarmOff"
            Color="@Color.Error"
            ToggledIcon="@Icons.Material.Filled.AlarmOn"
            ToggledColor="@Color.Success"
            />

        </div> *@
    </TitleContent>
    <ChildContent>
        <div style="width:100%;height:100%;" @onclick="() => EnlargeImg()">
            <img src="@NodePosition.Image" style="width:100%;height:100%" />
        </div>
    </ChildContent>
</MudExpansionPanel>

@code {
    [Parameter] public NodePositionView NodePosition { get; set; }
    [CascadingParameter] public CascadingMapData _mapData { get; set; }

    private Timer _timer;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async Task CenterMap()
    {
        await JS.InvokeVoidAsync("CenterOnMap", NodePosition.Lat, NodePosition.Lng);
    }
    public async Task ToggleTimer()
    {
        NodePosition.LastHarvest = DateTime.Now;
        await _mapData.UpdateNodePosition(NodePosition);
    }
    private async Task DeleteNode(NodePositionView spot)
    {
        spot.Ghost = true;
        await _mapData.UpdateNodePosition(spot);
    }

    public void EnlargeImg()
    {

    }

}
