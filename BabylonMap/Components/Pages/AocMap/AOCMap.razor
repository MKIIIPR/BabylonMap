@page "/map"
@using AshesMapBib.Components
@using AshesMapBib.Models
@using BabylonMap.Components.AppStates
@using BabylonMap.Components.MapComponents
@inject IJSRuntime JS
@inject MapHandler MapHandler 
@inject IDialogService DialogService


<div style="width: 100%; display: flex; flex-direction: row;">


    <div id="map" style="height: 900px; width: 75%;" @oncontextmenu="@(OpenContextMenu)" @oncontextmenu:preventDefault @oncontextmenu:stopPropagation>
    </div>

    <div style="width: 25%">

        
        <NodePositionViever></NodePositionViever>
     
    </div>
</div>

<p>Koordinaten: <span id="map-coordinates">-</span></p>
<MudDialog @bind-Visible="_dialogVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Add Node</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="SelectedNode.Name" Label="Node Name" />
        <MudTextField @bind-Value="SelectedNode.Type" Label="Node Type" />
        <MudTextField @bind-Value="SelectedNode.NodeImageUrl" Label="Node Image URL" />
        <MudNumericField @bind-Value="SelectedNode.RespawnTimer" Label="Respawn Timer (min)" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitNode" Class="px-10">Save</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="Close" Class="px-10">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code
{
    public NodePositionView ToCreateNewPos { get; set; } = new();
    public bool _dialogSpawnVis { get; set; }
}
@code {
    private bool _dialogVisible;
    private int _rating;
    private readonly DialogOptions _dialogOptions = new() { FullWidth = true };
    public bool _nodeSpawnVis { get; set; } = false;
    public Node SelectedNode = null;

    private void OpenDialog() 
    {
        SelectedNode = new();
        _dialogVisible = true;

    }
    private void OpenDialogNodePos(string type)
    {
        _mapData.ResType = type;
        ToCreateNewPos = new();
        _dialogSpawnVis = true;

    }
    private async Task SubmitNode() 
    {
        await _mapData.AddNode(SelectedNode);
        _dialogVisible = false;
    }
    private async Task SubmitNodePos()
    {
        await _mapData.AddNode(SelectedNode);
        _dialogSpawnVis= false;
    }
    private void Close() {
        _dialogVisible = false;
    }
}
<MudMenu PositionAtCursor @ref="_contextMenu">

    @foreach (var group in _mapData.NodeList.GroupBy(r => r.Type))
    {
        <MudMenuItem Label="@group.Key" OnClick="()=>OpenDialogAsync(group.Key)" />
    }
    <MudDivider Class="my-2" />
    <MudMenuItem Label ="AddNode" OnClick="OpenDialog"></MudMenuItem>
    <MudMenuItem Label="AddNode2" OnClick="OpenNodeDialog"></MudMenuItem>
</MudMenu>
@* 
<MudButton @onclick="()=>OpenDialogAsync("wood")" Variant="Variant.Filled" Color="Color.Primary">
    Select Coffee
</MudButton> *@
<MudChip T="string">@_returnValue</MudChip>
@code {
    private Task OpenNodeDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth=true,MaxWidth =MaxWidth.Medium };

        return DialogService.ShowAsync<NodeDialog>("Simple Dialog", options);
    }
    string _returnValue = "Dialog return value (not yet set)";

    private async Task OpenDialogAsync(string type)
    {
        _mapData.ResType = type;
        var options = new DialogOptions { CloseOnEscapeKey = true };
       

        var dialogReference = await DialogService.ShowAsync<NodePositionDialog>("Dialog Keyboard Accessibility Demo", options);
        _returnValue = "Waiting for dialog to conclude ...";
        StateHasChanged();
        var dialogResult = await dialogReference.Result;

        if (dialogResult.Canceled)
        {
            _returnValue = "Dialog was canceled";
        }
        else
        {
            // Daten aus dem Dialog holen und in SelectedNode speichern
            if (dialogResult.Data is NodePositionView nodeData)
            {
                var SelectedNode = nodeData;
                SelectedNode.Lat = MapHandler.Lat;
                SelectedNode.Lng = MapHandler.Lng;
                await _mapData.AddResourcePosition(SelectedNode);
            }
            else
            {
                _returnValue = "Unexpected dialog result";
            }
        }

    }
}
@code {
    private MudMenu _contextMenu = null!;
    [CascadingParameter]
    public CascadingMapData? _mapData { get; set; } // Referenz zur CascadingMapData
    public void SetResType(string type){
        _dialogSpawnVis = true;
        _mapData.ResType = type;
    }

    private void EnlargeImg(string img){

    }
    private async Task OpenContextMenu(MouseEventArgs args)
    {
        await _contextMenu.OpenMenuAsync(args);
    }
    protected override void OnParametersSet()
    {
 

        if (_mapData == null)
        {
            Console.WriteLine("⚠️ _mapData ist noch NULL!");
        }
        else
        {
            Console.WriteLine("✅ _mapData ist gesetzt!");
        }
    }
    private void AddNewResourcePosition(Node resource, int rarity)
    {
        double lat = MapHandler.Lat; // Hier holen wir uns die Koordinaten aus der MapHandler-Klasse
        double lng = MapHandler.Lng;

        // Hier greifst du auf die Cascading-Werte zu, um neue Ressourcen hinzuzufügen

        // Deine Logik für das Hinzufügen der Ressource
        Console.WriteLine($"Ressource {resource.Name} hinzugefügt bei {lat}, {lng}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initMap");
        }
    }

    public List<Node> ResourceList { get; set; } = new List<Node>();

    private string GetIconForType(string type)
    {
        return type.ToLower() switch
        {
            "metal" => Icons.Material.Filled.Build,
            "wood" => Icons.Material.Filled.Forest,
            "gem" => Icons.Material.Filled.Diamond,
            _ => Icons.Material.Filled.HelpOutline,
        };
    }

    private Timer? _timer;

    protected override void OnInitialized()
    {
        
    }

    
}
